---
title: Version control and track changes
jupyter: python3
format: html
author:
    - name: L. Darmet
    - name: JJ. Torre

---

## Git, GitHub, Gitlab  {.scrollable}

An introduction to version control, easy to share/reproduce code, and more!

You can find it as a scrollable RevealJS presentation [here](www/git_presentation.html).

By: L. Darmet and JJ. Torre

<img src="www/img/banner.png" alt="drawing" width="500">


<center>Are you in this picture?</center>
<center>
<img src="www/img/final.png" alt="drawing" style="margin:auto" width='500' height='500'>
</center>

<center>Or in this one ?</center>
<center>
<img src="www/img/ctrlz.png" alt="drawing" style="margin:auto" width='500' height='500'>
</center>

<center>
    <h1> Version control can be a solution ! </h1>
<img src="www/img/git_flow.png" alt="drawing" style="margin:auto" width='300' height='300'>

</center>

## Use cases {.scrollable}
* **Keep track of file changes** (also with Matlab..!) üñ•Ô∏è
* **Synchronize** changes among team members ü§ù
* **Share** the code along your publication: open science and open data üì°
    - Yes you are ashamed to share your code but it would put a strain on you for better code (cleaner, clearer, etc) ü•≤
    - Sharing only data is sometimes harsh if you don't provide an example on how to use them üôè

* Maintain a **code library** üìö to share existing code with new interns, PhD, collaborators,...
    - Avoid developing again and again the same tools for experimental protocol, pre-processing, data visualization...
    - Standard pipelines
    - We have created a **[COPHY](https://github.com/cophyteam/) organization** on GitHub to centralize code
<center>
<img src="www/img/expprotocol.jpg" alt="drawing" style=left width='300' height='300'>
</center>

* Manage and maintain the $\LaTeX$ code of your thesis ü§ì
* Overleaf supports direct sync with GitHub to import existing repos or create one based on current project.
> This direct sync also allows to backup your Overleaf projects

# Git + GitHub is the most common version control system  {.scrollable}

## What are the differences between the two ?  {.scrollable}
<center>
<img src="www/img/git_github.jpg" alt="drawing" margin='left' width='350' height='350'>
</center>

<img src="www/img/git_logo.png" alt="drawing" margin='left' width='100' height='100'>

- Git is an **open-source distributed version control tool**
- It follows the evolution of a set of files in your computer, called a **repository** or **repo**
- Created by Linus Torvalds (creator of Linux and Android) in 2005 and maintaned by the Linux Foundation

<img src="www/img/github_logo.png" alt="drawing" style=left width='75' height='75'>

* Github is an **online hosting service for git repos**
* Startup created in 2008, acquired by **Microsoft** in 2018
* The repos can be either **private** or **public**
* Additionnal features:
    - **Features requests, issues and pull request**: ask for new functionnality and merge new functionnality to the exisiting code after review by the owner
    - A **wiki** for each project
    - **Continuous integration tools** (run automatic tests to check if additions in the code don't alter the expected outputs)
    - Host your **personnal website**
* Cute cat/octopus mascot
* **Follow** people and explore their code database

## Personnal static website  {.scrollable}
<img src="www/img/website.png" alt="drawing" style=left width='950' height='950'>

- There exists other online hosting services such as **Bitbucket** (also private company) or **Gitlab** (open-source).
- We have a **self-hosted Gitlab in CRNL**..! üí´
<br />
<center>
<div class="row">
  <div class="row">
    <img src="www/img/bitbucket-logo.png" alt="drawing" style=left width='150' height='150'>
  </div>
  <div class="column">
    <img src="www/img/gitlab.png" alt="drawing" style=left width='250' height='250'>
  </div>
</div>   
</center>

# Get GitHub for free  {.scrollable}
 **GitHub is free** but you may encounter limitations if you do not suscribe to **GitHub Pro** (4\$ per month üí∏)

Because of your academic or student status you can get **Github Pro for free**.

Apply here:
https://education.github.com/benefits

<center>
<img src="www/img/githubstudent.jpg" alt="drawing" style=left width='350' height='350'>
</center>

# Or use the Gitlab of CRNL ü§Ø  {.scrollable}

1. Open **a ticket** to ask access to the GitLab
2. Sign in and connect in: [http://10.69.168.17/users/sign_in](http://10.69.168.17/users/sign_in)

<center>
<img src="www/img/gitlabisae.jpg" alt="drawing" style=left width='450' height='450'>
</center>

# Terminology  {.scrollable}
- Create a **repository** or **repo** and **clone** it
- **Commit** your changes (locally) and then **push** (remote) $\rightarrow$ keep track of changes/addition
- **Pull** to get latest changes from other people
- Going back to a previous **commit**
- Solve **merge conflicts**
- Use **branch** to develop features in parallel

 <center>
 <img src="www/img/commits.png" alt="drawing" style=left width='900' height='900'>
 </center>

# Code example to start using Gitub üë©‚Äçüíª  {.scrollable}

## Install Git on your machine  {.scrollable}
* On Linux from a terminal:
```bash
sudo apt update
sudo apt install git-all
```
* On Windows:  
    - Download it from <https://git-scm.com/download/win>
    - Run the installer

## Create a local repo from scratch  {.scrollable}
> Enter commands in GitBash for Windows and on terminal for Linux


```bash
mkdir mynewrepo && cd mynewrepo
git init 
ECHO >> README.md
git add README.md
git commit -m "Add README"
```

## Connect your machine with GitHub  {.scrollable}
> First you need to create an account on <https://github.com>  
> Then we will need **SSH key** to have a secure and authentified connection

1. In terminal or GitBash, generate SSH keys:  
```bash
ssh-keygen -t rsa -C "your_email@example.com"
```
Use same email as registred on GitHub. Then press `Enter` two times (no need to set a password).



2. Then open the generated (public) key to share it with GitHub:
```bash
notepad ~/.ssh/id_rsa.pub
```
3. On GitHub website go to: **Settings** > **SSH and GPG Keys**. Click on **New SSH key** and enter a title.  
  
4. In the field **Key** paste all the contents of the file `id_rsa.pub` that you have just opened, beginning at `ssh-ras ...` up to your email (including it). You can copy with a terminal utility (such as `xclip`) if copying by hand does not work
5. Click **Add SSH key**

## Connect your local repo to GitHub  {.scrollable}
> As you have setup a secured SSH key, no need for password

Go back to you terminal where you have initialized your local repo:
```bash
git remote add origin git@github.com:username/new_repo
git push -u origin master
```

# Or use a GUI for simpler interactions ü§ì {.scrollable}

- GitHub Desktop: from Github directly
- Gitkraken: the most comprehensive (requires GitHub Pro)

<center>
<img src="www/img/gitkraken.jpeg" alt="drawing" style=left width='550' height='550'>
</center>

> They also handle the SSH keys for you

<img src="www/img/gitkrakenGUI.png" alt="drawing" style=left width='1050' height='1050'>

<center>
    <font size="5">Thank you for your attention! </font>   
</center>
<br />

<center>
    <font size="5">Questions ‚ùì </font>  
</center>   
<br />


<center>
<img src="www/img/perfectworld.jpg" alt="drawing" style=left width='800' height='800'>
</center>

