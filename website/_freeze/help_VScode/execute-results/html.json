{
  "hash": "ab3c899b43685c0d1ab29cabc323dd29",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: VScode on the cluster\nauthor: Romain Ligneul\ntoc: true\nexecute: \n  echo: true\n  freeze: true\n  eval: false\n---\n\n\n\n\n[VScode](https://code.visualstudio.com/) is a very potent IDE that is used by many people, including at the CRNL.\n\nHowever, the straightforward usage of VScode on the cluster poses a **big collective problem**. Indeed, when you open a SSH session with VScode, you arrive in the so-called \"login node\" (currently node14 on the new server, and node12 on the old one). This node is not supposed to perform any computation, but instead to organise input-output, ssh connections, etc.\n\nEven if they do most of their computations using jobs submitted to SLURM, VScode users (I am amongst them) can still make (made!) the entire infrastructure crash by overloading the \"login node\". This is because every VScode user will open some notebook, load some data, call slurm from that same login node. So, when 10 or 20 of them are connected at the same time...\n\nðŸ’¥\n\nFortunately, a simple solution exists and this tutorial will guide you through it.\n\n### 1. Install the remote tunnel extension (only once)\n\nOn your local computer (either at home or in the lab), install the [Remote - Tunnel](https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-server) extension of VS code.\n\n### 2. Connect to the cluster through SSH and add a SSH key (only once)\n\nFind your .ssh folder.\n\nOn Linux, you can probably find it at `~/.ssh/` or `/home/username/.ssh/`.\n\nOn Window, you can probably find at at `C:\\Users\\username\\.ssh\\`.\n\nIf you don't find it, just create it and `cd` in it. Then type:\n\n`ssh-keygen -f crnlcluster`\n\n::: callout-note\nIf ssh-keygen is not found, you may need to install [Putty](https://www.putty.org/), restart your terminal and perform these steps again.\n:::\n\nFollow the instructions. If you want to use a passphrase, keep it short. Otherwise press Enter to skip entering a passphrase. Then type: `type crnlcluster.pub`\n\nYou public key will appear in the terminal. Keep it open.\n\nNow, type:\n\n`ssh cluster_username@10.69.168.93`\n\n**Change** cluster_username to match your username on the cluster (typically, firstname.lastname)\n\nYou will be asked to enter your CRNL password (the same you use to enter in the wiki.crnl.fr and to open Jupyter lab sessions)\n\nNow, you are logged in the cluster! Type:\n\n`cd ~/.ssh/`\n\n`touch authorized_keys`\n\n`vi authorized_keys`\n\nThis last command will open a blank file, unless you already registered some SSH keys in the past. In any case, make sure your pointer is at the end of the document and copy paste what had appeared in your local terminal (after `type crnlcluster.pub`). To paste, you only need to make a right-click. To save and close the authorized_keys file, just type `:wq` in it.\n\nClose the terminal.\n\nNow, the cluster knows your ssh key and you won't need to use the password anymore (only the ssh key passphrase if you entered one). But let's make an extra-step to further automatize the process.\n\nIn your local .ssh folder, create a file named `config` and add the following lines to it:\n\n```         \nHost CRNLcluster\n  HostName 10.69.168.93\n  User cluster_username\n  ForwardX11 yes\n  ForwardX11Trusted yes\n  IdentityFile \"path/to/your/sshkey/crnlcluster\"\n```\n\nAdjust cluster_username and do not add the .pub extension to your IdentityFile/sshkey.\n\nNow, open a terminal and type:\n\n`ssh cluster_username@CRNLcluster`\n\nYou are already into the cluster! Keep this terminal open for the next step.\n\n### 3. Download VS code on the cluster (only once)\n\nIn the terminal of the cluster (i.e. after type `ssh cluster_username@CRNLcluster`), run these two lines\n\n\n\n\n```{bash}\nwget --user-agent=Mozilla --content-disposition -E -c \"https://code.visualstudio.com/sha/download?build=stable&os=linux-x64\" -O vscode.tar.gz\ntar -xzf vscode.tar.gz\n```\n\n\n\n\nVScode is now available in our home directory.\n\n### 4. Create a tunnel to VS code on the cluster from your local computer (only once)\n\n**Windows users** On your local computer, create a file named vscode_cluster_tunnel.bat and copy paste the following lines:\n\n```         \n@echo off\nset \"remote_username=cluster_username\"\nset \"remote_hostname=CRNLcluster\"\nssh -t %remote_username%@%remote_hostname% \"srun --mem=16G --cpus-per-task=8 --pty $SHELL -c '~/VSCode-linux-x64/bin/code tunnel'; bash\"\n```\n\nNote, if you use the Notepad to create the file, make your to select the option 'All files' in \"Save as type\". Otherwise, you won't be able to have a .bat extension (it would be .bat.txt, which does not work!)\n\n**Linux users** On your local computer, create a file named vscode_cluster_tunnel.sh in a convenient place and copy-paste the following\n\n```         \n#!/bin/bash\nremote_username=\"cluster_username\"\nremote_hostname=\"CRNLcluster\"\nssh -t \"${remote_username}@${remote_hostname}\" \"srun --mem=16G --cpus-per-task=8 --pty \\$SHELL -c '~/VSCode-linux-x64/bin/code tunnel'; bash\"\n```\n\nNow, each time you will need to open a VS session on the server, you will need to run this .bat or .sh file. But the first time, you will run this script, the terminal window will ask you to authorize the tunnel through Github (or Microsoft) and to give it a name. Name it as you prefer (for example: vscode_cluster_tunnel). Follow the instructions (make sure you are connected to Github in your browser, open the link and copy paste the authorization code)\n\nConsider using Github as a tunnel provider rather than Microsoft.\n\n### 5. Connect to the tunnel from your local VS code (each time)\n\nRun the script vscode_cluster_tunnel.sh or vscode_cluster_tunnel.bat (on Windows, you can just double click on the .bat file).\n\nThen, in VS code, either press Ctrl+Shift+P and type \"tunnel connect\" to select the function \"Remote Tunnels: Connect to Tunnel\", or click on the bottom left icon that look like this:\n\n![](images/paste-1.png)\n\nAnd click \"Connect to Tunnel\"\n\nThen, select Github and the tunnel name that you have defined just before.\n\nThat's it!\n\nYou are now running VS code on a compute node with dedicated ressource. You can mess around, it won't interfere with the happiness of other users!\n\n:::{.callout-tip}\nWhen you stop using VS code, quit or kill the process initiated by vscode_cluster_tunnel (on Windows, just close the corresponding Terminal window)\nIt will automatically interrupt the SLURM job that runs your VS code session, and free resources for your colleagues!\n:::\n\n",
    "supporting": [
      "help_VScode_files"
    ],
    "filters": [],
    "includes": {}
  }
}