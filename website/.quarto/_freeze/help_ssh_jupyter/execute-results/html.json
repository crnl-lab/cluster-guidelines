{
  "hash": "176c59dca567302b6de5b26bef668158",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using Interactive Jupyter over SSH\nauthor: Romain Ligneul\ntoc: true\nexecute: \n  echo: true\n  freeze: false\n---\n\n\nVisual Code over SSH is great but it is limited in its ability to run interactive Jupyter notebooks unless X11 forwarding is properly configured.\nAnother way to go is to run a persistent Jupyter lab session on your remote SSH server and forward it through a tunnel.\n\n## Extend your .bashrc file\n\nTo do so, we need to edit our .bashrc file (in /home/username/.bashrc) and add the following lines at the end.\n\n\n```{bash}\n# >>> Jupyterlab Remote >>>\nfunction jlremote {\n    echo $(hostname) > ~/.jupyternode.txt\n    cd /crnldata/cophy/\n    XDG_RUNTIME_DIR= jupyter lab --no-browser --port=9753 --ip=$(hostname)\n}\n# <<< Jupyterlab end config <<<\n```\n\n\nNote that the --port variable can be changed to your preference.\n\nThanks to this piece of code, each time a terminal will open, the function jlremote will be added to the path.\n\n## Launch the Jupyter session\n\nMost remote linux servers will offer the opportunity to run tmux, that allows opening a persistent shell session.\n\nIn your remote terminal, type `tmux`. The tmux session will open. That is where we wll run our Jupyter notebook.\n\nThen, type `srun --mem=4G --pty bash`. This will associate your tmux session with a compute node on the remote server.\nYou can adjust the memory you need for your notebooks.\n\nThen, type `jlremote`. This will launch your Jupyter lab session. It might take a bit of time before displaying a message like this one\n\n\n```{bash}\n    Copy/paste this URL into your browser when you connect for the first time,\n    to login with a token:\n        http://localhost:8888/?token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n```\n\n\nCopy the token value (after = sign) and keep it somewhere.\n\n## Set up the SSH tunnel\n\n### Windows\n\nOn your local Windows compute, create a .bat file\n\n\n```{bat}\n@echo off\nsetlocal\n:: the port you've chosen in the function jlremote \nset port=9753\n:: your username on the remote server\nset remote_username=firstname.lastname\n:: your machine IP\nset remote_hostname=10.69.168.62 \n\nfor /f \"tokens=* usebackq\" %%i in (`powershell -command \"ssh %remote_username%@%remote_hostname% 'tail -1 ~/.jupyternode.txt'\"`) do set node=%%i\n\n:: Read the node from the temporary file\nset /p node=<node.txt\n\nset url=http://localhost:%port%\n\n:: Construct and run the SSH command\nset cmd=ssh -CNL 8888:%node%:%port% %remote_username%@%remote_hostname%\necho Running '%cmd%'\n\n:: Delete the temporary file\ndel node.txt\n\n%cmd%\n\nendlocal\n```\n\n\nRun (or double click on) the .bat file.\n\nYou should be able to use your notebook by using the address provided earlier.\n\n`http://localhost:8888/?token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`\n\nYou may also just use `http://localhost:8888/` and add the token manually. \n\nYou may set a simple password to access the notebook without the token in the future.\n\n\n### Linux\n\nOn your local Windows compute, create a .bat file\n\n\n```{bash}\nfunction jllocal {\n    port=9753\n    remote_username=USERNAME\n    remote_hostname=HOSTNAME\n    node=$(ssh $remote_username@$remote_hostname 'tail -1 ~/.jupyternode.txt')\n    url=\"http://localhost:$port\"\n    echo \"Opening $url\"\n    open \"$url\"\n    cmd=\"ssh -CNL \"8888\":\"$node\":\"$port\" $remote_username@$remote_hostname\"\n    echo \"Running '$cmd'\"\n    eval \"$cmd\"\n}\n```\n\n\nRun (or double click on) the .bat file.\n\nYou should be able to use your notebook by using the address provided earlier.\n\n`http://localhost:8888/?token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`\n\nYou may also just use `http://localhost:8888/` and add the token manually .\n\nYou may set a simple password to access the notebook without the token in the future.\n\n\n## Credits\n\n\nThis tutorial was largely inspired by this one:\n\nhttps://benjlindsay.com/posts/running-jupyter-lab-remotely/\n\n",
    "supporting": [
      "help_ssh_jupyter_files"
    ],
    "filters": [],
    "includes": {}
  }
}